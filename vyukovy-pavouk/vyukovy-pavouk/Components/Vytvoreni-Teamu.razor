@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http
@inject IGroupToken GroupToken
@inject IUserToken UserToken
@using vyukovy_pavouk.Data

<div class="container">
	<div class="main-box py-2 d-flex flex-column align-items-center">
		<!--vyskakovací okno pokud najde schodu názvu předmětu při vytváření nového předmětu -->
		@if(searchSubject != null) {		
			<fluent-dialog Hidden="@modelHidden">
			<div class="d-flex justify-content-center align-items-center h-100 w-100 flex-column">
				<h5 class="text-center">Předmět s názvem @searchSubject.Nazev už existuje. Zkuste jiný název!</h5>
				<?xml version="1.0" encoding="utf-8" ?>	
				<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 1000 1000" enable-background="new 0 0 1000 1000" xml:space="preserve">
				<metadata> Svg Vector Icons : http://www.onlinewebfonts.com/icon </metadata>
				<g><path d="M939.4,906.7H60.6c-31.7,0-50.6-25.9-50.6-50.9V144.2c0-31.9,25.8-50.9,50.6-50.9h878.7c31.7,0,50.6,25.9,50.6,50.9v711.7C990,887.7,964.3,906.7,939.4,906.7z M84.3,832h831.4V168H84.3V832z" /><path d="M327.8,405.9c-7.9,0-15.8-3-21.9-9.1l-80.5-81c-12.1-12.2-12.1-31.9,0-44c12.1-12.2,31.7-12.2,43.8,0l80.5,81c12.1,12.2,12.1,31.9,0,44C343.6,402.9,335.7,405.9,327.8,405.9z" /><path d="M247.3,405.9c-7.9,0-15.8-3-21.9-9.1c-12.1-12.2-12.1-31.9,0-44l80.5-81c12.1-12.2,31.7-12.2,43.8,0c12.1,12.2,12.1,31.9,0,44l-80.5,81C263.1,402.9,255.2,405.9,247.3,405.9z" /><path d="M752.7,406c-7.9,0-15.8-3-21.9-9.1l-80.5-81c-12.1-12.2-12.1-31.9,0-44c12.1-12.2,31.7-12.2,43.8,0l80.5,81c12.1,12.2,12.1,31.9,0,44C768.6,402.9,760.6,406,752.7,406z" /><path d="M672.2,405.9c-7.9,0-15.8-3-21.9-9.1c-12.1-12.2-12.1-31.9,0-44l80.5-81c12.1-12.2,31.7-12.2,43.8,0c12.1,12.2,12.1,31.9,0,44l-80.5,81C688.1,402.9,680.1,405.9,672.2,405.9z" /><path d="M772.4,711.1H227.6c-17.1,0-31-13.9-31-31.1c0-17.2,13.9-31.1,31-31.1h544.8c17.1,0,31,13.9,31,31.1C803.3,697.2,789.5,711.1,772.4,711.1z" /><path d="M542.1,711.1v58.7c0,0,0,42.2,61.9,42.2h66.6c0,0,61.9,0,61.9-42.2v-58.7H542.1z" /></g>
				</svg>
				<div>
					<fluent-button @onclick="CloseDialog" appearance="accent">Zavřít</fluent-button>
				</div>
			</div>
		</fluent-dialog>
		}
		<!--vytvoření nového předmětu -->
		<h1 class="py-5 text-center">Je potřeba vytvořit strukturu</h1>
		<EditForm Model="@subject" OnValidSubmit="@Create" class="editForm d-flex justify-content-center">
			 <FluentValidationValidator />
			<div class="card">
				<div class="card-body gap-4">
					<h2 class="card-title text-center">Vytvořit novou strukturu</h2>
					<InputText id="nazev" type="text" placeholder="Název předmětu" @bind-Value="@subject.Nazev"></InputText>
					<ValidationMessage For="@(()=>subject.Nazev)" />
						<div class="d-flex flex-column align-items-center">
						<label for="private" class="fw-bold">Privátní</label>
						<FluentCheckbox id="private" @bind-Value="@subject.Privatni"></FluentCheckbox>
						</div>
					<fluent-button appearance="accent" type="submit" disabled="@(!context.IsModified() || !context.Validate())">Vytvořit</fluent-button>
				</div>
			</div>
		</EditForm>
		<!--Pokud nejsou vytvořené žádné předměty (navazují na ně i Teamy) tabulka se nevykreslí -->
		@if (subjects.Count() != 0)
		{
			if(!IfAllPrivate()) {
				<h2 class="py-4">Nebo</h2>
				<EditForm Model="@group" OnValidSubmit="@CreateIfExist" class="editForm d-flex justify-content-center">
					<div class="card">
						<div class="card-body gap-4">
							<h2 class="card-title pt-2 text-center">Použít existující strukturu</h2>
							<select @bind-Value="@subjectSelect" @bind-Value:event="onchange">
								@foreach (var item in subjects)
								{
									if (item.Privatni == false)
									{
										<option>@item.Nazev</option>
									}
									else
									{
										if (item.Vytvoril == UserToken.Profile.Mail)
										{
											<option>@item.Nazev</option>
										}
										
									}
								}
							</select>
							<fluent-button appearance="accent" Disabled="@offBtn" type="submit">Vytvořit</fluent-button>
						</div>
					</div>
				</EditForm>
			}
			
		}
	</div>
</div>
<style>
	.editForm {
    width: 70%;
}
	#nazev {
	width: 50%;
	}
	svg {
	width: 50%;
	}
	fluent-dialog {
		position: sticky;
		z-index: 999;
	}
	.validation-message {
		margin: -10px;
	}
</style>
@code {
	//parametr, který přijímá od Tab
	[Parameter]
	public List<Predmet> subjects { get; set; }
	string subjectSelect { get; set; }
	[Inject]
	NavigationManager MyNavigationManager { get; set; }
	Predmet searchSubject { get; set; } = new Predmet();
	Skupina group = new Skupina();
	Predmet subject { get; set; } = new Predmet {Skupiny = new List<Skupina>()};
	bool modelHidden = true;
	bool offBtn = false;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if (firstRender)
		{
			if(subjects.Count() > 0) {
				subjectSelect = subjects[0].Nazev.ToString();
			}	 
			StateHasChanged();
		}

	}

	public async Task Create()
	{
		searchSubject = subjects.Find(x => x.Nazev.ToLower() == subject.Nazev.ToLower());
		if(searchSubject == null) {
			subject.Vytvoril = UserToken.Profile.Mail;
			subject.Skupiny.Add(new Skupina());
			subject.Skupiny[0].TmSkupina = (GroupToken.teamsContext.TeamId).ToString();
			//vytvoření nového předmětu se skupinou
			await Http.PostAsJsonAsync($"{MyNavigationManager.BaseUri}api/predmet", subject);
			//získání ID nově vytvořené skupiny
			Skupina Getskupina = await Http.GetFromJsonAsync<Skupina>($"{MyNavigationManager.BaseUri}api/Skupina/" + subject.Skupiny[0].TmSkupina);
			//vytvoření úvodní prerekvizity navazané na skupinu --> 0
			await VytvorUvodniSplneni(Getskupina);	
			MyNavigationManager.NavigateTo("/");
		}
		else {
			modelHidden = false;
		}

	}
	public async Task VytvorUvodniSplneni(Skupina skupina) {
		Splneni splneni = new Splneni();
		splneni.SkupinaID = skupina.Id;
		splneni.KapitolaID = 0;
		await Http.PostAsJsonAsync($"{MyNavigationManager.BaseUri}api/skupina/uvod", splneni);
	}
	//naváže na novou skupinu existující předmět
	public async Task CreateIfExist() {
		offBtn = true;
		//přidání ID skupiny 
		group.TmSkupina = (GroupToken.teamsContext.TeamId).ToString();
		//přidání ID předmětu z výběru nahoře
		searchSubject = subjects.Find(x => x.Nazev == subjectSelect);
		//dosazení ID předmětu
		group.PredmetID = searchSubject.Id;
		await Http.PostAsJsonAsync($"{MyNavigationManager.BaseUri}api/skupina", group);
		//získání ID nově vytvořené skupiny
		Skupina Getskupina = await Http.GetFromJsonAsync<Skupina>($"{MyNavigationManager.BaseUri}api/skupina/" + GroupToken.teamsContext.TeamId);
		//vytvoření úvodní prerekvizity navazané na skupinu --> 0
		await VytvorUvodniSplneni(Getskupina);
		MyNavigationManager.NavigateTo("/");
	}
	public void CloseDialog() => modelHidden = true;
	private bool IfAllPrivate() {
		if(subjects.Where(x => x.Privatni == true && x.Vytvoril != UserToken.Profile.Mail).Count() != subjects.Count()) {
			return false;
		}
		return true;
	}
}
