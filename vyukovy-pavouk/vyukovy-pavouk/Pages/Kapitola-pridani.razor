@page "/add"
@using vyukovy_pavouk.Data
@layout UserLayout
@inject NavigationManager MyNavigationManager
@inject MicrosoftTeams MicrosoftTeams
@inject HttpClient Http
@inject IUserToken UserToken
@inject IGroupToken GroupToken
@inject Solutaris.InfoWARE.ProtectedBrowserStorage.Services.IIWSessionStorageService sessionStorage

<div class="container">
	<h1 class="text-center py-2">Přidání kapitoly</h1>
	@if (!IsLoaded)
	{
		<div style="display: flex; justify-content: center; align-items: center; height: 50vh;">
			<FluentProgressRing />
		</div>
	}
	else
	{
		<EditForm Model="@kapitola" OnValidSubmit="@Pridej">
			<FluentValidationValidator />
			<label for="shirt-size">Nutno splnit</label>
			<br />
			<div class="form d-flex flex-column gap-4">
				<!-- TO DO -->

				<div class="d-flex gap-4 justify-content-center align-items-center flex-column">
					
						@for (int i = 0; i < @kapitola.KapitolaPrerekvizita.Count(); i++)
					{
						Prerekvizity prerekvizita = kapitola.KapitolaPrerekvizita[i].prerekvizita;
						if (prerekvizita != null)
						{
							int index = i;
							globalIndexPrerekvizita = i;
						
							PridejVyber(index, prerekvizita);
							
							
							<div class="d-flex gap-4 w-100 justify-content-center align-items-center">
								@if (kapitola.KapitolaPrerekvizita.Count() - 1 != index) {
									<InputText type="text" class="w-100" @bind-Value="@VybraneKapitoly[index].Název" disabled="true">

								</InputText>
							}
							else {
								<InputSelect class="w-100" @bind-Value="@prerekvizita.IdPrerekvizity">				
										@if (@kapitoly.Count() != 0) {
											@foreach (var kapitola in kapitoly)
											{
												<option value="@kapitola.Id">@kapitola.Název</option>
											}
										}
										else {
											<option value="0">Úvod</option>
										}
									</InputSelect>
							
									
							
								}
									
										
									
									@if (@kapitola.KapitolaPrerekvizita.Count > 1)
									{
										<Fluent-Button class="cancel" appearance="accent" @onclick="() => SmazPrerekvizitu(index)">X</Fluent-Button>
									}
									<!-- zobrazení + tlačítka u aktualního vstupu && maximální počet 4 prerekvizity && pokud máme mín prerekvizit vstupů může být maximální počet prerekvizit-->
									@if (@kapitola.KapitolaPrerekvizita.Count() - 1 == i && i < 3 && i < prerekvizity.Select(x => x.KapitolaId).Distinct().Count() - 1)
									{
										<Fluent-button appearance="accent" class="create" @onclick="@VytvorPrerekvizitu"><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff" /></svg></Fluent-button>
									}
								</div>
							}
						}									

				</div>

				<div class="d-flex flex-column">
					<label for="NazevKapitoly">Název Kapitoly</label>
					<InputText type="text" id="NazevKapitoly" @bind-Value="@kapitola.Název" />
					<ValidationMessage For="@(()=>@kapitola.Název)" />
				</div>
				<div class="d-flex flex-column">
					<label for="perex">Perex</label>
					<InputText type="text" id="perex" @bind-Value="@kapitola.Perex" />
					<ValidationMessage For="@(()=>@kapitola.Perex)" />
				</div>
				<div class="d-flex flex-column">
					<label for="obsah">Obsah</label>
					<InputTextArea type="text" id="obsah" resize="vertical" @bind-Value="@kapitola.Kontent"></InputTextArea>
					<ValidationMessage For="@(()=>@kapitola.Kontent)" />
				</div>
				<label class="First-label">Odkazy na videa</label>
				//TO DO předělat na GRID 
				<div class="d-flex gap-4 justify-content-center align-items-center flex-column">
					@for (int i = 0; i < @kapitola.Videa.Count; i++)
					{
						var index = i;
						globalIndex = i;
						var video = kapitola.Videa[i];
						<div class="d-flex gap-4 w-100 justify-content-center align-items-center">
							<InputText type="text" class="flex-grow-1" @bind-Value="video.Odkaz" />										
							<fluent-button class="cancel" appearance="accent" @onclick="@(() => kapitola.Videa.RemoveAt(index))">X</fluent-button>
							
						</div>
					<ValidationMessage class="text-left d-block" For="@(() => @video.Odkaz)" />
					}
					@if (globalIndex < 9)
					{
						<fluent-button class="create" appearance="accent" @onclick="@(() => kapitola.Videa.Add(new Videa()))"><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff" /></svg></fluent-button>
					}
				</div>
				//TO DO předělat na GRID 
				<label class="First-label">Testy</label>
				<div class="d-flex gap-4 justify-content-center align-items-center">
					<InputText type="text" class="flex-grow-1" @bind-Value="@kapitola.Zadani[0].Odkaz">
						<div class="d-flex gap-2">
							<!--<fluent-button class="cancel" appearance="accent">X</fluent-button>-->
							<fluent-button appearance="accent" class="create"><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff" /></svg></fluent-button>
						</div>
					</InputText>										
				</div>
					<ValidationMessage For="@(() => @kapitola.Zadani[0].Odkaz)" />
				<!--<div class="d-flex gap-2 justify-content-center align-items-center counter flex-column">
					<div class="d-flex align-items-center">
						<fluent-button appearance="accent" @onclick="() => {pocet--; if(pocet < 1) {pocet = 1;}}">-</fluent-button>
						  <input type="number" class="text-center" @bind-value=@pocet @oninput="Kontrola" readonly>
						<fluent-button appearance="accent" @onclick="() => {pocet++; if(pocet < 1) {pocet = 1;}}"><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff"/></svg></fluent-button>
					</div>
					<p class="text-center mb-0">Počet testů, který je potřeba splnit.</p>
				</div> -->
				<div class="d-flex justify-content-center align-center w-100">
					<fluent-button class="main-btn" type="submit" appearance="accent">Vytvořit</fluent-button>
				</div>
			</div>
		</EditForm>
	}

</div>
<style>
	.validation-message {
		margin-top: 10px;
	}
</style>
@code {
	int PocetSplneni = 1;
	int globalIndex = 0;
	int globalIndexPrerekvizita = 0;
	int globalIndexKontrola = 0;

	Skupina skupina = new Skupina();
	List<KapitolaPrerekvizita> prerekvizity = new List<KapitolaPrerekvizita>();
	//kapitola má mnoho videí, prerekvizit, ale zatím jedno zadání
	vyukovy_pavouk.Data.Kapitola kapitola = new vyukovy_pavouk.Data.Kapitola { Videa = new List<Videa>(), KapitolaPrerekvizita = new List<KapitolaPrerekvizita>(), Zadani = new List<Zadani>() };

	List<vyukovy_pavouk.Data.Kapitola> kapitoly = new List<vyukovy_pavouk.Data.Kapitola>();
	List<vyukovy_pavouk.Data.Kapitola> VybraneKapitoly = new List<vyukovy_pavouk.Data.Kapitola>();

	bool IsLoaded = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await UserToken.GetUserAsync(sessionStorage);
			await GroupToken.GetGroupAsync(MicrosoftTeams);
			if (UserToken.Profile == null)
			{
				MyNavigationManager.NavigateTo("/tab");
			}
			else
			{
				skupina = await Http.GetFromJsonAsync<Skupina>($"{MyNavigationManager.BaseUri}api/Skupina/" + (GroupToken.teamsContext.TeamId).ToString());
				kapitoly = await Http.GetFromJsonAsync<List<vyukovy_pavouk.Data.Kapitola>>($"{MyNavigationManager.BaseUri}api/Kapitoly/nazvy/" + (skupina.ID_Predmetu));
				prerekvizity = await Http.GetFromJsonAsync<List<KapitolaPrerekvizita>>($"{MyNavigationManager.BaseUri}api/Kapitoly/prerekvizity/" + (skupina.ID_Predmetu));

				//vytvoření prvního vstupu pro prerekvizitu
				kapitola.KapitolaPrerekvizita.Add(new KapitolaPrerekvizita() { prerekvizita = new Prerekvizity() });
				//zatím řešeno, že je pouze jedno zadání
				kapitola.Zadani.Add(new Zadani());
				IsLoaded = true;
			}
			StateHasChanged();
		}
	}
	private async Task Pridej()
	{
		kapitola.IdPredmetu = skupina.ID_Predmetu;
		//kontrola zda-li se dané prerekvizity už nenachzejí v DB
		foreach (var prerekvizita in prerekvizity)
		{
			if (globalIndexKontrola == kapitola.KapitolaPrerekvizita.Count)
			{
				break;
			}
			for (var i = globalIndexKontrola; i < kapitola.KapitolaPrerekvizita.Count; i++)
			{
				if (prerekvizita.prerekvizita.IdPrerekvizity == kapitola.KapitolaPrerekvizita[i].prerekvizita.IdPrerekvizity)
				{
					//vymaže stejnou hodnotu u nově vytvořené instance kapitoly
					kapitola.KapitolaPrerekvizita.RemoveAt(i);
					globalIndexKontrola++;
					//přidá existujicí vztah mezi KapitolaPrerekvizita - Prerekvizita --> díky tomu nebudou vznikat duplicitní hodnoty
					KapitolaPrerekvizita existujiciPrerekvizita = new KapitolaPrerekvizita();
					existujiciPrerekvizita.PrerekvizitaId = prerekvizita.PrerekvizitaId;
					kapitola.KapitolaPrerekvizita.Insert(0, existujiciPrerekvizita);
				}
			}
		}

		await Http.PostAsJsonAsync($"{MyNavigationManager.BaseUri}api/kapitola", kapitola);
		MyNavigationManager.NavigateTo("/");
	}
	public void VytvorPrerekvizitu()
	{
		//najde třídu prerekvizity, kterou jsme si vybrali 
		vyukovy_pavouk.Data.Kapitola hledanaPrerekvizita = new vyukovy_pavouk.Data.Kapitola();
		
		hledanaPrerekvizita = kapitoly.Find(x => x.Id == kapitola.KapitolaPrerekvizita[globalIndexPrerekvizita].prerekvizita.IdPrerekvizity);
		//vymažeme ze zobrazení u selectů už vybranou prerekvizitu
		kapitoly.Remove(hledanaPrerekvizita);

		//VybraneKapitoly.Add(hledanaPrerekvizita);
		kapitola.KapitolaPrerekvizita.Add(new KapitolaPrerekvizita() { prerekvizita = new Prerekvizity() });

	}
	public void SmazPrerekvizitu(int index) {
		kapitola.KapitolaPrerekvizita.RemoveAt(index);
		//pokud je poslední musíme ji přidat zde protože už nebude vyvolaná eventem VytvorPrerekvizitu() ==> pokud by to tu nebylo vznikali by duplicitni hodnoty u výběru
		if(index == kapitola.KapitolaPrerekvizita.Count()) {
			//protože už jsme jí předtím smazali musíme jí zpátky přidat, pokud bychom to neudělali hodnota zmizí při smazání posledního selectu
			kapitoly.Add(VybraneKapitoly[index - 1]);
		}
		else {
			//přidá zpázky kapitolu a odebere z listu, který pak zobrazujeme v inputech co už máme zvolené 
			kapitoly.Add(VybraneKapitoly[index]);
		}
		//seřadí kapitoly podle ID 
		kapitoly = kapitoly.OrderBy(x => x.Id).ToList();
		//vymaže vybranou kapitolu z určitého selectu 
		VybraneKapitoly.RemoveAt(index);
	}
	public void PridejVyber(int index, Prerekvizity prerekvizita) {
		//vyhledá kapitolu po výběru prerekvizity
		vyukovy_pavouk.Data.Kapitola HledanaKapitola = new vyukovy_pavouk.Data.Kapitola();
		HledanaKapitola = kapitoly.Find(x => x.Id == prerekvizita.IdPrerekvizity);
		//test jestli se nejedná o načtení 
		if(HledanaKapitola != null) {
			//funguje jako přepis jednotlivého výběru př: vyberu kapitola1 a pak se rozhodnu pro jinou kapitolu vymažu kapitolu1 z listu výběr
			if(VybraneKapitoly.Count() > index) {
				VybraneKapitoly.RemoveAt(index);
			}
			//vložím aktuální výběr na svůj index 
			VybraneKapitoly.Insert(index, HledanaKapitola);
		}
		
	}
}
