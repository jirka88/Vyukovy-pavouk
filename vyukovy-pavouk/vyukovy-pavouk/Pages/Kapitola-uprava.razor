@page "/edit"
@page "/edit/{IdKapitola:int}"
@using Newtonsoft.Json
@using vyukovy_pavouk.Data
@using Microsoft.JSInterop;
@inject IJSRuntime jsRuntime
@layout UserLayout
@inject NavigationManager MyNavigationManager
@inject MicrosoftTeams MicrosoftTeams
@inject HttpClient Http
@inject IUserToken UserToken
@inject IGroupToken GroupToken
@inject Solutaris.InfoWARE.ProtectedBrowserStorage.Services.IIWSessionStorageService sessionStorage

<div class="container">
	@if (!IsLoaded)
	{
		<div style="display: flex; justify-content: center; align-items: center; height: calc(90vh - 88px);">
			<FluentProgressRing />
		</div>
	}
	else
	{
		<h1 class="text-center py-2 @(dark ? "text-white" : "")">Úprava kapitoly</h1>
		<EditForm EditContext="@EditContext" OnSubmit="@Edit">
			<FluentValidationValidator />
			<label class="fw-bold @(dark ? "text-white" : "")">*Nutno splnit</label>
			<br />
			<div class="form d-flex flex-column gap-4 @(dark ? "text-white" : "")">

				<div class="d-flex gap-4 justify-content-center align-items-center flex-column">

					@for (int i = 0; i < chapter.ChapterPrerequisites.Count(); i++)
					{
						Prerequisite prerekvizita = chapter.ChapterPrerequisites[i].Prerequisite;
						if (prerekvizita != null)
						{
							int index = i;
							globalIndexPrerekvizita = i;

							AddSelect(index, prerekvizita);

							<div class="prerekvizity d-flex w-100 justify-content-center align-items-center flex-wrap @(dark ? "darkInput" : "")">
								@if (chapter.ChapterPrerequisites.Count() - 1 != index)
								{
									<InputText type="text" class="flex-grow-1" @bind-Value="@selectedChapters[index].Name" disabled="true">
									</InputText>
									CreatePrerequisiteReadOnly();
								}
								else
								{
									<InputSelect class="flex-grow-1" @bind-Value="@prerekvizita.PrerequisiteID">
										<!-- podmínka pro kontrolu jestli se nejedná o úvodní kapitolu -1 je při našem výběru 0 při načtení a celkový počet prerekvizit dané kapitoly je jedna-->
										<option value="0" selected disabled hidden>Vyberte Prerekvizitu</option>
										@if (!startChapter)
										{
											@foreach (var kapitola in chapters)
											{
												<option value="@kapitola.Id">@kapitola.Name</option>
											}
										}
										else
										{
											<option value="-1" selected>Úvod</option>
										}

									</InputSelect>
								}
								@if (chapter.ChapterPrerequisites.Count > 1)
								{
									<Fluent-Button class="cancel" appearance="accent" @onclick="() => DeletePrerequisite(index)">
										<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="18" height="18" x="0px" y="0px"
									viewBox="0 0 460.775 460.775" style="enable-background:new 0 0 460 460;" xml:space="preserve">
									<path d="M285.08,230.397L456.218,59.27c6.076-6.077,6.076-15.911,0-21.986L423.511,4.565c-2.913-2.911-6.866-4.55-10.992-4.55
									c-4.127,0-8.08,1.639-10.993,4.55l-171.138,171.14L59.25,4.565c-2.913-2.911-6.866-4.55-10.993-4.55
									c-4.126,0-8.08,1.639-10.992,4.55L4.558,37.284c-6.077,6.075-6.077,15.909,0,21.986l171.138,171.128L4.575,401.505
									c-6.074,6.077-6.074,15.911,0,21.986l32.709,32.719c2.911,2.911,6.865,4.55,10.992,4.55c4.127,0,8.08-1.639,10.994-4.55
									l171.117-171.12l171.118,171.12c2.913,2.911,6.866,4.55,10.993,4.55c4.128,0,8.081-1.639,10.992-4.55l32.709-32.719
									c6.074-6.075,6.074-15.909,0-21.986L285.08,230.397z"/></svg></Fluent-Button>
								}
								<!-- zobrazení + tlačítka u aktualního vstupu && maximální počet 4 prerekvizity && pokud máme mín prerekvizit vstupů může být maximální počet prerekvizit-->
								@if (chapter.ChapterPrerequisites.Count() - 1 == i && i < 3 && i < prerequisites.Select(x => x.ChapterID).Distinct().Count() - 2 && prerekvizita.PrerequisiteID != 0 && prerekvizita.PrerequisiteID != -1)
								{
									<Fluent-button appearance="accent" class="create" @onclick="@CreatePrerequisite"><svg width="24" height="24" stroke="white" stroke-width="1" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff" /></svg></Fluent-button>
								}
								<ValidationMessage For="@(()=>chapter.ChapterPrerequisites[index].Prerequisite.PrerequisiteID)" />

							</div>
						}
					}

				</div>

				<div class="d-flex flex-column @(dark ? "darkInput" : "")">
					<label for="NazevKapitoly" class="fw-bold">*Název Kapitoly</label>
					<InputText type="text" id="NazevKapitoly" @bind-Value="@chapter.Name" />
					<ValidationMessage For="@(()=>chapter.Name)" />
				</div>
				<div class="d-flex flex-column @(dark ? "darkInput" : "")">
					<label for="perex" class="fw-bold">Perex</label>
					<InputText type="text" id="perex" @bind-Value="@chapter.Perex" />
					<ValidationMessage For="@(()=>chapter.Perex)" />
				</div>
				<div class="d-flex flex-column @(dark ? "darkTheme" : "")">
					<label for="obsah" class="fw-bold bg-transparent">*Obsah</label>
					<BlazoredTextEditor @ref="@QuillHtml" Placeholder="Obsah kapitoly">
						<ToolbarContent>
							<select class="ql-header">
								<option selected=""></option>
								<option value="1"></option>
								<option value="2"></option>
								<option value="3"></option>
								<option value="4"></option>
								<option value="5"></option>
							</select>
							<span class="ql-formats">
								<button class="ql-bold"></button>
								<button class="ql-italic"></button>
								<button class="ql-underline"></button>
								<button class="ql-strike"></button>
							</span>
							<span class="ql-formats">
										<button class="ql-script" value="sub"></button>
										<button class="ql-script" value="super"></button>
							</span>
							<span class="ql-formats">
								<select class="ql-color"></select>
								<select class="ql-background"></select>
							</span>
							<span class="ql-formats">
								<button class="ql-code-block" value="code-block"></button>
							</span>
							<span class="ql-formats">
								<button class="ql-list" value="ordered"></button>
								<button class="ql-list" value="bullet"></button>
								<select class="ql-align">
									<option selected=""></option>
									<option value="center"></option>
									<option value="right"></option>
									<option value="justify"></option>
								</select>
							</span>
							<span class="ql-formats">
								<button class="ql-link"></button>
							</span>

						</ToolbarContent>
					</BlazoredTextEditor>				
					<ValidationMessage For="@(()=>chapter.Content)" /> 
				</div>
				<!--Odkazy na videa-->
				<label class="First-label">Odkazy na videa</label>

				<div class="d-flex gap-2 justify-content-center align-items-center flex-column">
					@for (int i = 0; i < chapter.Links.Count; i++)
					{
						int index = i;
						int PocetOdkazu = i + 1;
						globalIndex = i;
						var video = chapter.Links[i];

						<label class="w-100">Popis odkazu @PocetOdkazu</label>
						<div class="nazvy-odkazy d-flex w-100 justify-content-center align-items-center flex-wrap @(dark ? "darkInput" : "")">
							<InputText type="text" class="flex-grow-1" @bind-Value="video.Name" />
							<ValidationMessage For="@(() => @video.Name)" />
						</div>
						<label class="w-100">*Odkaz</label>
						<div class="odkazy d-flex w-100 justify-content-center align-items-center flex-wrap @(dark ? "darkInput" : "")">
							<InputText type="text" class="flex-grow-1" @bind-Value="video.Reference" placeholder="https://..." />
							<fluent-button class="cancel" appearance="accent" @onclick="@(() => chapter.Links.RemoveAt(index))"><svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"  width="18" height="18"  x="0px" y="0px"
									viewBox="0 0 460.775 460.775" style="enable-background:new 0 0 460 460;" xml:space="preserve">
									<path d="M285.08,230.397L456.218,59.27c6.076-6.077,6.076-15.911,0-21.986L423.511,4.565c-2.913-2.911-6.866-4.55-10.992-4.55
									c-4.127,0-8.08,1.639-10.993,4.55l-171.138,171.14L59.25,4.565c-2.913-2.911-6.866-4.55-10.993-4.55
									c-4.126,0-8.08,1.639-10.992,4.55L4.558,37.284c-6.077,6.075-6.077,15.909,0,21.986l171.138,171.128L4.575,401.505
									c-6.074,6.077-6.074,15.911,0,21.986l32.709,32.719c2.911,2.911,6.865,4.55,10.992,4.55c4.127,0,8.08-1.639,10.994-4.55
									l171.117-171.12l171.118,171.12c2.913,2.911,6.866,4.55,10.993,4.55c4.128,0,8.081-1.639,10.992-4.55l32.709-32.719
									c6.074-6.075,6.074-15.909,0-21.986L285.08,230.397z"/></svg></fluent-button>
							<ValidationMessage For="@(() => @video.Reference)" />
						</div>
					}
					@if (globalIndex < maxCountLink)
					{
						<fluent-button class="create mt-2" appearance="accent" @onclick="@CreateLink"><svg width="24" height="24" stroke="white" stroke-width="1" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff" /></svg></fluent-button>
						showToast = false;
					}
					else if (globalIndex == 11 && !showToast)
					{
						notice.ShowInfo("Kapitola dosáhla maximalního počtu vložených odkazů.", "Info");
						showToast = true;
					}
				</div>
				<label class="First-label">*Test</label>
				<div class="odkazy d-flex justify-content-center align-items-center w-100 flex-wrap @(dark ? "darkInput" : "")">
					<InputText type="text" class="flex-grow-1 w-100" @bind-Value="@chapter.Assignments[0].Reference">
						<div class="d-flex gap-2">
							<fluent-button appearance="accent" class="create"><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff" /></svg></fluent-button>
						</div>
					</InputText>
					<ValidationMessage For="@(() => chapter.Assignments[0].Reference)" />
				</div>

				<!--<div class="d-flex gap-2 justify-content-center align-items-center counter flex-column">
					<div class="d-flex align-items-center">
						<fluent-button appearance="accent" @onclick="() => {pocet--; if(pocet < 1) {pocet = 1;}}">-</fluent-button>
						  <input type="number" class="text-center" @bind-value=@pocet @oninput="Kontrola" readonly>
						<fluent-button appearance="accent" @onclick="() => {pocet++; if(pocet < 1) {pocet = 1;}}"><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff"/></svg></fluent-button>
					</div>
					<p class="text-center mb-0">Počet testů, který je potřeba splnit.</p>
				</div> -->
				<div class="d-flex justify-content-center align-center w-100">
					<fluent-button class="main-btn" type="submit" Disabled="@turnOffBtn" appearance="accent">Upravit</fluent-button>
				</div>
			</div>
		</EditForm>
	}
</div>
<style>
	.validation-message {
		margin-top: 10px;
	}
	.odkazy, .prerekvizity {
		gap: 0em 1.5em;
	}
	.odkazy .validation-message, .prerekvizity .validation-message, .nazvy-odkazy .validation-message {
		width: 100%;
		text-align: left;
	}
	.darkTheme .ql-toolbar.ql-snow .ql-picker-label, .darkTheme .ql-snow .ql-stroke {
		color: white;
		stroke: white;
	}
	.darkTheme .ql-snow .ql-fill,.darkTheme .ql-snow .ql-stroke.ql-fill {
		fill:white;
	}
	.darkTheme .ql-snow .ql-align .ql-picker-options .ql-stroke {
		stroke: black;
	}
	.darkTheme .ql-snow .ql-tooltip {
		background: #1f1f1f;
		color: white;
	}
</style>
@code {
	[Parameter]
	public int IdKapitola { get; set; }

	int globalIndex = 0;
	int globalIndexPrerekvizita = 0;
	int globalIndexControl = 0;
	int maxCountLink = 11;
	bool startChapter = false;
	bool load = false;
	bool showToast = false;
	bool turnOffBtn = false;
	bool IsLoaded = false;
	bool dark = false;

	vyukovy_pavouk.Data.Chapter chapter = new vyukovy_pavouk.Data.Chapter();

	protected override async Task OnParametersSetAsync()
	{
		chapter = await Http.GetFromJsonAsync<vyukovy_pavouk.Data.Chapter>($"{MyNavigationManager.BaseUri}api/kapitola/" + IdKapitola);
		if (chapter.ChapterPrerequisites[0].Prerequisite.PrerequisiteID == 0)
		{
			startChapter = true;
		}
		else {
			loadedPrerequisitesId = JsonConvert.DeserializeObject<ChapterPrerequisite>(JsonConvert.SerializeObject(chapter.ChapterPrerequisites[0]));
		}
	}

	public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();
	Group group = new Group();
	List<ChapterPrerequisite> prerequisites = new List<ChapterPrerequisite>();
	EditContext EditContext;
	List<Chapter> chapters = new List<Chapter>();
	List<Chapter> selectedChapters = new List<Chapter>();
	ChapterPrerequisite loadedPrerequisitesId = new ChapterPrerequisite();
	@inject IToastService notice;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await UserToken.GetUserAsync(sessionStorage);
			await GroupToken.GetGroupAsync(MicrosoftTeams);
			if (UserToken.Profile == null || UserToken.Profile.JobTitle.ToLower() == "žák školy")
			{
				MyNavigationManager.NavigateTo("/tab");
			}
			else
			{
				if(GroupToken.teamsContext.Theme == "dark" || GroupToken.teamsContext.Theme == "contrast") {
					dark = true;
				}
				group = await Http.GetFromJsonAsync<Group>($"{MyNavigationManager.BaseUri}api/Skupina/" + (GroupToken.teamsContext.TeamId).ToString());
				chapters = await Http.GetFromJsonAsync<List<vyukovy_pavouk.Data.Chapter>>($"{MyNavigationManager.BaseUri}api/Kapitoly/nazvy/" + (group.Subject.Id));	
				//vymazání upravované kapitoly --> jinak by se dala navázat kapitola sama na sebe
				chapters.RemoveAt(chapters.FindIndex(x => x.Id == chapter.Id));
				prerequisites = await Http.GetFromJsonAsync<List<ChapterPrerequisite>>($"{MyNavigationManager.BaseUri}api/Kapitoly/prerekvizity/" + (group.Subject.Id));		
				EditContext = new EditContext(chapter);
				IsLoaded = true;
				load = true;
			}
			StateHasChanged();
		}

		while (load)
		{
			try
			{
				await QuillHtml.LoadHTMLContent(chapter.Content);
				load = false;
				StateHasChanged();
			}
			catch
			{
				await Task.Delay(10);
			}
		}
	}
	private async Task Edit()
	{
		turnOffBtn = true;
		chapter.Content = await this.QuillHtml.GetText();
		if (EditContext.Validate())
		{
			chapter.Content = await this.QuillHtml.GetHTML();
			chapter.SubjectID = group.Subject.Id;
			//kontrola proti vytvoření smyčky --> nesmí vzniknout to, aby jedna a druhou kapitola měli na sebe navzájem propojené prerekvizity --> nelze to pak splnit
			if (!startChapter)
			{
				int IDChapter = chapter.Id;
				foreach (ChapterPrerequisite prerekvizita in prerequisites)
				{
					//hledá, aby nevznikla smyčka 
					ChapterPrerequisite searchLoopChapter = chapter.ChapterPrerequisites.Where(x => x.Prerequisite.PrerequisiteID == prerekvizita.Chapter.Id && IDChapter == prerekvizita.Prerequisite.PrerequisiteID).SingleOrDefault();
					if (searchLoopChapter != null)
					{
						notice.ShowError("Nelze navázat s prerekvizitou, která vyžaduje splnění této kapitoly.", "Neúspěch!");
						turnOffBtn = false;
						return;
					}
				}
			}		
				//hledání proti smyčkám druhá vlna (potřeba vyřešit i možné ostatní vlny smyček --> možná implementace něčeho jako rekurze)
				foreach (ChapterPrerequisite ChapterPrerequisite in chapter.ChapterPrerequisites)
				{
					Chapter Tchapter = await Http.GetFromJsonAsync<Chapter>($"{MyNavigationManager.BaseUri}api/kapitola/" + ChapterPrerequisite.Prerequisite.PrerequisiteID);
					if(Tchapter.Id != 0) {
						foreach (ChapterPrerequisite ChapterPrerequisiteTest in Tchapter.ChapterPrerequisites)
					{
						List<ChapterPrerequisite> TestLoopChapterPrerequisites = new List<ChapterPrerequisite>();
						TestLoopChapterPrerequisites.AddRange(prerequisites.Where(x => x.ChapterID == ChapterPrerequisiteTest.Prerequisite.PrerequisiteID));
						if(TestLoopChapterPrerequisites.Count() != 0) {
							if(TestLoopChapterPrerequisites.Where(x => x.Prerequisite.PrerequisiteID == chapter.Id).SingleOrDefault() != null) {
								notice.ShowError("Nelze navázat s prerekvizitou, která vyžaduje splnění této kapitoly.", "Neúspěch!");
								turnOffBtn = false;
								return;
							}	
						}
					}
					}
					
				}
			//pokud je úvod --> nastavám na 0 protože to je ID pro úvodní kapitolu
			if (chapter.ChapterPrerequisites[0].Prerequisite.PrerequisiteID == -1)
			{
				chapter.ChapterPrerequisites[0].Prerequisite.PrerequisiteID = 0;
			}

			//kontrola zda-li se dané prerekvizity už nenachzejí v DB
			foreach (var prerequisite in prerequisites)
			{
				if (globalIndexControl == chapter.ChapterPrerequisites.Count)
				{
					break;
				}			
					for (var i = globalIndexControl; i < chapter.ChapterPrerequisites.Count; i++)
				{			
					//porovnává zdali upravená kapitola neobsahuje stejnou prerekvizitu jako před úpravou  
					if (prerequisite.Prerequisite.PrerequisiteID == chapter.ChapterPrerequisites[i].Prerequisite.PrerequisiteID)
					{		
						ChapterPrerequisite existujiciPrerekvizita = new ChapterPrerequisite();
						//vymaže stejnou hodnotu u nově vytvořené instance kapitoly
						int id = chapter.ChapterPrerequisites[i].Id;			
						existujiciPrerekvizita.Id = id;
						chapter.ChapterPrerequisites.RemoveAt(i);
						//přidá existujicí vztah mezi KapitolaPrerekvizita - Prerekvizita --> díky tomu nebudou vznikat duplicitní hodnoty
						existujiciPrerekvizita.PrerequisiteID = prerequisite.PrerequisiteID;
						chapter.ChapterPrerequisites.Insert(0, existujiciPrerekvizita);						
						globalIndexControl++;
						break;
					}
				}	
			}	
			await Http.PutAsJsonAsync($"{MyNavigationManager.BaseUri}api/kapitola", chapter);
			MyNavigationManager.NavigateTo("/");
			notice.ShowSuccess("Kapitola byla úspěšně upravena.", "Úspěch!");
		}
		else {
			turnOffBtn = false;
		}

	}
	private void CreateLink()
	{
		if (chapter.Links.Count() == 0 || chapter.Links[globalIndex].Reference != null)
		{
			chapter.Links.Add(new Link());
		}
	}
	private void CreatePrerequisite()
	{
		bool create = true;
		foreach (ChapterPrerequisite item in chapter.ChapterPrerequisites)
		{
			if (item.Prerequisite.PrerequisiteID == 0)
			{
				create = false;
				break;
			}
		}
		if (create)
		{
			//najde třídu prerekvizity, kterou jsme si vybrali
			vyukovy_pavouk.Data.Chapter searchPrerequisite = new vyukovy_pavouk.Data.Chapter();

			searchPrerequisite = chapters.Find(x => x.Id == chapter.ChapterPrerequisites[globalIndexPrerekvizita].Prerequisite.PrerequisiteID);
			//vymažeme ze zobrazení u selectů už vybranou prerekvizitu
			chapters.Remove(searchPrerequisite);

			chapter.ChapterPrerequisites.Add(new ChapterPrerequisite() { Prerequisite = new Prerequisite() });
		}


	}
	private void CreatePrerequisiteReadOnly()
	{
		//najde třídu prerekvizity, kterou jsme si vybrali
		vyukovy_pavouk.Data.Chapter searchPrerequisite = new vyukovy_pavouk.Data.Chapter();

		searchPrerequisite = chapters.Find(x => x.Id == chapter.ChapterPrerequisites[globalIndexPrerekvizita].Prerequisite.PrerequisiteID);
		//vymažeme ze zobrazení u selectů už vybranou prerekvizitu
		chapters.Remove(searchPrerequisite);

	}
	private void DeletePrerequisite(int index)
	{
		chapter.ChapterPrerequisites.RemoveAt(index);
		//pokud se jedná o defaultní výběr pouze vymaže select, ale žádnou hodnotu z listu neodebere
		if (chapter.ChapterPrerequisites.Count() > index)
		{
			//pokud je poslední musíme ji přidat zde protože už nebude vyvolaná eventem VytvorPrerekvizitu() ==> pokud by to tu nebylo vznikali by duplicitni hodnoty u výběru
			if (index == chapter.ChapterPrerequisites.Count())
			{
				//protože už jsme jí předtím smazali musíme jí zpátky přidat, pokud bychom to neudělali hodnota zmizí při smazání posledního selectu
				chapters.Add(selectedChapters[index - 1]);
			}
			else
			{
				//přidá zpázky kapitolu a odebere z listu, který pak zobrazujeme v inputech co už máme zvolené
				chapters.Add(selectedChapters[index]);
			}
			//seřadí kapitoly podle ID
			chapters = chapters.OrderBy(x => x.Id).ToList();
			//vymaže vybranou kapitolu z určitého selectu
			selectedChapters.RemoveAt(index);
		}
		else
		{
			chapters.Add(selectedChapters[index - 1]);
		}
		chapters = chapters.OrderBy(x => x.Id).ToList();

	}
	public void AddSelect(int index, Prerequisite prerequisite)
	{
		//resetuje ID u prvního výběru pokud je změněn (u prvního výběru nedojde k jeho smazání)
		if(chapter.ChapterPrerequisites.Count() == 1) {
			//pokud je úvodní prerekvizita -> neřeší se to 
				if(chapter.ChapterPrerequisites[0].Prerequisite.PrerequisiteID != 0 && chapter.ChapterPrerequisites[0].Prerequisite.PrerequisiteID != -1 ) {
					if(chapter.ChapterPrerequisites[0].Prerequisite.PrerequisiteID != loadedPrerequisitesId.Prerequisite.PrerequisiteID && chapter.ChapterPrerequisites[0].Id != 0) {
					chapter.ChapterPrerequisites[0].Id = 0;
				}
			}
			
		}
		//vyhledá kapitolu po výběru prerekvizity
		Chapter SearchChapter = new Chapter();
		SearchChapter = chapters.Find(x => x.Id == prerequisite.PrerequisiteID);
		//test jestli se nejedná o načtení
		if (SearchChapter != null)
		{
			//funguje jako přepis jednotlivého výběru př: vyberu kapitola1 a pak se rozhodnu pro jinou kapitolu vymažu kapitolu1 z listu výběr
			if (selectedChapters.Count() > index)
			{
				selectedChapters.RemoveAt(index);
			}
			//vložím aktuální výběr na svůj index
			selectedChapters.Insert(index, SearchChapter);
		}

	}
}
