@page "/edit"
@page "/edit/{IdKapitola:int}"
@using vyukovy_pavouk.Data
@using Microsoft.JSInterop;
@inject IJSRuntime JS
@layout UserLayout
@inject NavigationManager MyNavigationManager
@inject MicrosoftTeams MicrosoftTeams
@inject HttpClient Http
@inject IUserToken UserToken
@inject IGroupToken GroupToken
@inject Solutaris.InfoWARE.ProtectedBrowserStorage.Services.IIWSessionStorageService sessionStorage

<div class="container">
	<h1 class="text-center py-2">Úprava kapitoly</h1>
	@if (!IsLoaded)
	{
		<div style="display: flex; justify-content: center; align-items: center; height: 50vh;">
			<FluentProgressRing />
		</div>
	}
	else
	{
		<EditForm EditContext="@EditContext" OnSubmit="@Uprav">
			<FluentValidationValidator />
			<label class="fw-bold">*Nutno splnit</label>
			<br />
			<div class="form d-flex flex-column gap-4">

				<div class="d-flex gap-4 justify-content-center align-items-center flex-column">

					@for (int i = 0; i < @kapitola.KapitolaPrerekvizita.Count(); i++)
					{
						Prerekvizity prerekvizita = kapitola.KapitolaPrerekvizita[i].prerekvizita;
						if (prerekvizita != null)
						{
							int index = i;
							globalIndexPrerekvizita = i;

							PridejVyber(index, prerekvizita);

							<div class="prerekvizity d-flex w-100 justify-content-center align-items-center flex-wrap">
								@if (kapitola.KapitolaPrerekvizita.Count() - 1 != index)
								{
									<InputText type="text" class="flex-grow-1" @bind-Value="@VybraneKapitoly[index].Název" disabled="true">
									</InputText>
									VytvorPrerekvizituNacteni();
								}
								else
								{
									<InputSelect class="flex-grow-1" @bind-Value="@prerekvizita.IdPrerekvizity">
										<!-- podmínka pro kontrolu jestli se nejedná o úvodní kapitolu -1 je při našem výběru 0 při načtení a celkový počet prerekvizit dané kapitoly je jedna-->
										<option value="0" selected disabled hidden>Vyberte Prerekvizitu</option>
										@if (!uvodniKapitola)
										{
											@foreach (var kapitola in kapitoly)
											{
												<option value="@kapitola.Id">@kapitola.Název</option>
											}
										}
										else
										{
											<option value="-1">Úvod</option>
										}

									</InputSelect>
								}
								@if (@kapitola.KapitolaPrerekvizita.Count > 1)
								{
									<Fluent-Button class="cancel" appearance="accent" @onclick="() => SmazPrerekvizitu(index)">X</Fluent-Button>
								}
								<!-- zobrazení + tlačítka u aktualního vstupu && maximální počet 4 prerekvizity && pokud máme mín prerekvizit vstupů může být maximální počet prerekvizit-->
								@if (@kapitola.KapitolaPrerekvizita.Count() - 1 == i && i < 3 && i < prerekvizity.Select(x => x.KapitolaId).Distinct().Count() - 2 && prerekvizita.IdPrerekvizity != 0 && prerekvizita.IdPrerekvizity != -1)
								{
									<Fluent-button appearance="accent" class="create" @onclick="@VytvorPrerekvizitu"><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff" /></svg></Fluent-button>
								}
								<ValidationMessage For="@(()=>@kapitola.KapitolaPrerekvizita[index].prerekvizita.IdPrerekvizity)" />

							</div>
						}
					}

				</div>

				<div class="d-flex flex-column">
					<label for="NazevKapitoly" class="fw-bold">*Název Kapitoly</label>
					<InputText type="text" id="NazevKapitoly" @bind-Value="@kapitola.Název" />
					<ValidationMessage For="@(()=>@kapitola.Název)" />
				</div>
				<div class="d-flex flex-column">
					<label for="perex" class="fw-bold">Perex</label>
					<InputText type="text" id="perex" @bind-Value="@kapitola.Perex" />
					<ValidationMessage For="@(()=>@kapitola.Perex)" />
				</div>
				<div class="d-flex flex-column">
					<label for="obsah" class="fw-bold">*Obsah</label>
					<!--<InputTextArea type="text" id="obsah" resize="vertical" @bind-Value="@kapitola.Kontent"></InputTextArea>-->
					<BlazoredTextEditor @ref="@QuillHtml" Placeholder="Obsah kapitoly">
						<ToolbarContent>
							<select class="ql-header">
								<option selected=""></option>
								<option value="1"></option>
								<option value="2"></option>
								<option value="3"></option>
								<option value="4"></option>
								<option value="5"></option>
							</select>
							<span class="ql-formats">
								<button class="ql-bold"></button>
								<button class="ql-italic"></button>
								<button class="ql-underline"></button>
								<button class="ql-strike"></button>
							</span>
							<span class="ql-formats">
								<select class="ql-color"></select>
								<select class="ql-background"></select>
							</span>
							<span class="ql-formats">
								<button class="ql-code-block" value="code-block"></button>
							</span>
							<span class="ql-formats">
								<button class="ql-list" value="ordered"></button>
								<button class="ql-list" value="bullet"></button>
								<select class="ql-align">
									<option selected=""></option>
									<option value="center"></option>
									<option value="right"></option>
									<option value="justify"></option>
								</select>
							</span>
							<span class="ql-formats">
								<button class="ql-link"></button>
							</span>

						</ToolbarContent>

					</BlazoredTextEditor>

					<ValidationMessage For="@(()=>@kapitola.Kontent)" /> 
				</div>
				<!--Odkazy na videa-->
				<label class="First-label">Odkazy na videa</label>

				<div class="d-flex gap-2 justify-content-center align-items-center flex-column">
					@for (int i = 0; i < @kapitola.Videa.Count; i++)
					{
						int index = i;
						int PocetOdkazu = i + 1;
						globalIndex = i;
						var video = kapitola.Videa[i];

						<label class="w-100">Popis odkazu @PocetOdkazu</label>
						<div class="nazvy-odkazy d-flex w-100 justify-content-center align-items-center flex-wrap">
							<InputText type="text" class="flex-grow-1" @bind-Value="video.Nazev" />
							<ValidationMessage For="@(() => @video.Nazev)" />
						</div>
						<label class="w-100">*Odkaz</label>
						<div class="odkazy d-flex w-100 justify-content-center align-items-center flex-wrap">
							<InputText type="text" class="flex-grow-1" @bind-Value="video.Odkaz" placeholder="https://..." />
							<fluent-button class="cancel" appearance="accent" @onclick="@(() => kapitola.Videa.RemoveAt(index))">X</fluent-button>
							<ValidationMessage For="@(() => @video.Odkaz)" />
						</div>
					}
					@if (globalIndex < maximalniPocetOdkazu)
					{
						<fluent-button class="create mt-2" appearance="accent" @onclick="@VytvorOdkaz"><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff" /></svg></fluent-button>
						ukazToast = false;
					}
					else if (globalIndex == 11 && !ukazToast)
					{
						upozorneni.ShowInfo("Kapitola dosáhla maximalního počtu vložených odkazů.", "Info");
						ukazToast = true;
					}
				</div>
				<label class="First-label">*Testy</label>
				<div class="odkazy d-flex justify-content-center align-items-center w-100 flex-wrap">
					<InputText type="text" class="flex-grow-1 w-100" @bind-Value="@kapitola.Zadani[0].Odkaz">
						<div class="d-flex gap-2">
							<!--<fluent-button class="cancel" appearance="accent">X</fluent-button>-->
							<fluent-button appearance="accent" class="create"><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff" /></svg></fluent-button>
						</div>
					</InputText>
					<ValidationMessage For="@(() => @kapitola.Zadani[0].Odkaz)" />
				</div>

				<!--<div class="d-flex gap-2 justify-content-center align-items-center counter flex-column">
					<div class="d-flex align-items-center">
						<fluent-button appearance="accent" @onclick="() => {pocet--; if(pocet < 1) {pocet = 1;}}">-</fluent-button>
						  <input type="number" class="text-center" @bind-value=@pocet @oninput="Kontrola" readonly>
						<fluent-button appearance="accent" @onclick="() => {pocet++; if(pocet < 1) {pocet = 1;}}"><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M11.883 3.007 12 3a1 1 0 0 1 .993.883L13 4v7h7a1 1 0 0 1 .993.883L21 12a1 1 0 0 1-.883.993L20 13h-7v7a1 1 0 0 1-.883.993L12 21a1 1 0 0 1-.993-.883L11 20v-7H4a1 1 0 0 1-.993-.883L3 12a1 1 0 0 1 .883-.993L4 11h7V4a1 1 0 0 1 .883-.993L12 3l-.117.007Z" fill="#ffffff"/></svg></fluent-button>
					</div>
					<p class="text-center mb-0">Počet testů, který je potřeba splnit.</p>
				</div> -->
				<div class="d-flex justify-content-center align-center w-100">
					<fluent-button class="main-btn" type="submit" appearance="accent">Upravit</fluent-button>
				</div>
			</div>
		</EditForm>

	}

</div>
<style>
	.validation-message {
		margin-top: 10px;
	}

	.odkazy, .prerekvizity {
		gap: 0em 1.5em;
	}

		.odkazy .validation-message, .prerekvizity .validation-message, .nazvy-odkazy .validation-message {
			width: 100%;
			text-align: left;
		}

</style>
@code {
	int PocetSplneni = 1;
	int globalIndex = 0;
	int globalIndexPrerekvizita = 0;
	int globalIndexKontrola = 0;
	int maximalniPocetOdkazu = 11;
	bool uvodniKapitola = false;

	bool nacti = false;
	bool ukazToast = false;
	[Parameter]
	public int IdKapitola { get; set; }

	vyukovy_pavouk.Data.Kapitola kapitola = new vyukovy_pavouk.Data.Kapitola();

	protected override async Task OnParametersSetAsync()
	{
		kapitola = await Http.GetFromJsonAsync<vyukovy_pavouk.Data.Kapitola>($"{MyNavigationManager.BaseUri}api/kapitola/" + IdKapitola);
		if (kapitola.KapitolaPrerekvizita[0].prerekvizita.IdPrerekvizity == 0)
		{
			uvodniKapitola = true;
		}
	}
	public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

	Skupina skupina = new Skupina();
	List<KapitolaPrerekvizita> prerekvizity = new List<KapitolaPrerekvizita>();
	EditContext EditContext;
	List<vyukovy_pavouk.Data.Kapitola> kapitoly = new List<vyukovy_pavouk.Data.Kapitola>();
	List<vyukovy_pavouk.Data.Kapitola> VybraneKapitoly = new List<vyukovy_pavouk.Data.Kapitola>();
	@inject IToastService upozorneni;
	bool IsLoaded = false;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await UserToken.GetUserAsync(sessionStorage);
			await GroupToken.GetGroupAsync(MicrosoftTeams);
			if (UserToken.Profile == null || UserToken.Profile.JobTitle == "žák školy")
			{
				MyNavigationManager.NavigateTo("/tab");
			}
			else
			{
				skupina = await Http.GetFromJsonAsync<Skupina>($"{MyNavigationManager.BaseUri}api/Skupina/" + (GroupToken.teamsContext.TeamId).ToString());
				kapitoly = await Http.GetFromJsonAsync<List<vyukovy_pavouk.Data.Kapitola>>($"{MyNavigationManager.BaseUri}api/Kapitoly/nazvy/" + (skupina.IDPredmetu));
				//vymazání upravované kapitoly --> jinak by se dala navázat kapitola sama na sebe
				kapitoly.RemoveAt(kapitoly.FindIndex(x => x.Id == kapitola.Id));
				prerekvizity = await Http.GetFromJsonAsync<List<KapitolaPrerekvizita>>($"{MyNavigationManager.BaseUri}api/Kapitoly/prerekvizity/" + (skupina.IDPredmetu));
				EditContext = new EditContext(kapitola);
				IsLoaded = true;
				nacti = true;
			}
			StateHasChanged();
		}

		while (nacti)
		{
			try
			{
				await QuillHtml.LoadHTMLContent(kapitola.Kontent);
				nacti = false;
				StateHasChanged();
			}
			catch
			{
				await Task.Delay(10);
			}
		}
	}
	private async Task Uprav()
	{
		kapitola.Kontent = await this.QuillHtml.GetText();
		if (EditContext.Validate())
		{
			kapitola.Kontent = await this.QuillHtml.GetHTML();
			kapitola.IdPredmetu = skupina.IDPredmetu;
			//pokud je úvod --> nastavám na 0 protože to je ID pro úvodní kapitolu
			if (kapitola.KapitolaPrerekvizita[0].prerekvizita.IdPrerekvizity == -1)
			{
				kapitola.KapitolaPrerekvizita[0].prerekvizita.IdPrerekvizity = 0;
			}
			//kontrola zda-li se dané prerekvizity už nenachzejí v DB
			foreach (var prerekvizita in prerekvizity)
			{
				if (globalIndexKontrola == kapitola.KapitolaPrerekvizita.Count)
				{
					break;
				}
				for (var i = globalIndexKontrola; i < kapitola.KapitolaPrerekvizita.Count; i++)
				{
					if (prerekvizita.prerekvizita.IdPrerekvizity == kapitola.KapitolaPrerekvizita[i].prerekvizita.IdPrerekvizity)
					{
						//vymaže stejnou hodnotu u nově vytvořené instance kapitoly
						kapitola.KapitolaPrerekvizita.RemoveAt(i);
						globalIndexKontrola++;
						//přidá existujicí vztah mezi KapitolaPrerekvizita - Prerekvizita --> díky tomu nebudou vznikat duplicitní hodnoty
						KapitolaPrerekvizita existujiciPrerekvizita = new KapitolaPrerekvizita();
						existujiciPrerekvizita.IdPrerekvizita = prerekvizita.IdPrerekvizita;
						kapitola.KapitolaPrerekvizita.Insert(0, existujiciPrerekvizita);
					}
				}
			}

			await Http.PutAsJsonAsync($"{MyNavigationManager.BaseUri}api/kapitola", kapitola);
			MyNavigationManager.NavigateTo("/");
			upozorneni.ShowSuccess("Kapitola byla úspěšně upravena.", "Úspěch!");
		}

	}

	private void VytvorOdkaz()
	{
		if (kapitola.Videa.Count() == 0 || kapitola.Videa[globalIndex].Odkaz != null)
		{
			kapitola.Videa.Add(new Videa());
		}
	}
	private void VytvorPrerekvizitu()
	{
		bool vytvor = true;
		foreach (KapitolaPrerekvizita item in kapitola.KapitolaPrerekvizita)
		{
			if (item.prerekvizita.IdPrerekvizity == 0)
			{
				vytvor = false;
				break;
			}
		}
		if (vytvor)
		{
			//najde třídu prerekvizity, kterou jsme si vybrali
			vyukovy_pavouk.Data.Kapitola hledanaPrerekvizita = new vyukovy_pavouk.Data.Kapitola();

			hledanaPrerekvizita = kapitoly.Find(x => x.Id == kapitola.KapitolaPrerekvizita[globalIndexPrerekvizita].prerekvizita.IdPrerekvizity);
			//vymažeme ze zobrazení u selectů už vybranou prerekvizitu
			kapitoly.Remove(hledanaPrerekvizita);

			//VybraneKapitoly.Add(hledanaPrerekvizita);
			kapitola.KapitolaPrerekvizita.Add(new KapitolaPrerekvizita() { prerekvizita = new Prerekvizity() });
		}


	}
	private void VytvorPrerekvizituNacteni()
	{
		//najde třídu prerekvizity, kterou jsme si vybrali
		vyukovy_pavouk.Data.Kapitola hledanaPrerekvizita = new vyukovy_pavouk.Data.Kapitola();

		hledanaPrerekvizita = kapitoly.Find(x => x.Id == kapitola.KapitolaPrerekvizita[globalIndexPrerekvizita].prerekvizita.IdPrerekvizity);
		//vymažeme ze zobrazení u selectů už vybranou prerekvizitu
		kapitoly.Remove(hledanaPrerekvizita);

	}
	private void SmazPrerekvizitu(int index)
	{
		kapitola.KapitolaPrerekvizita.RemoveAt(index);
		//pokud se jedná o defaultní výběr pouze vymaže select, ale žádnou hodnotu z listu neodebere
		if (kapitola.KapitolaPrerekvizita.Count() > index)
		{
			//pokud je poslední musíme ji přidat zde protože už nebude vyvolaná eventem VytvorPrerekvizitu() ==> pokud by to tu nebylo vznikali by duplicitni hodnoty u výběru
			if (index == kapitola.KapitolaPrerekvizita.Count())
			{
				//protože už jsme jí předtím smazali musíme jí zpátky přidat, pokud bychom to neudělali hodnota zmizí při smazání posledního selectu
				kapitoly.Add(VybraneKapitoly[index - 1]);
			}
			else
			{
				//přidá zpázky kapitolu a odebere z listu, který pak zobrazujeme v inputech co už máme zvolené
				kapitoly.Add(VybraneKapitoly[index]);
			}
			//seřadí kapitoly podle ID
			kapitoly = kapitoly.OrderBy(x => x.Id).ToList();
			//vymaže vybranou kapitolu z určitého selectu
			VybraneKapitoly.RemoveAt(index);
		}
		else
		{
			kapitoly.Add(VybraneKapitoly[index - 1]);
		}
		kapitoly = kapitoly.OrderBy(x => x.Id).ToList();

	}
	public void PridejVyber(int index, Prerekvizity prerekvizita)
	{
		//vyhledá kapitolu po výběru prerekvizity
		vyukovy_pavouk.Data.Kapitola HledanaKapitola = new vyukovy_pavouk.Data.Kapitola();
		HledanaKapitola = kapitoly.Find(x => x.Id == prerekvizita.IdPrerekvizity);
		//test jestli se nejedná o načtení
		if (HledanaKapitola != null)
		{
			//funguje jako přepis jednotlivého výběru př: vyberu kapitola1 a pak se rozhodnu pro jinou kapitolu vymažu kapitolu1 z listu výběr
			if (VybraneKapitoly.Count() > index)
			{
				VybraneKapitoly.RemoveAt(index);
			}
			//vložím aktuální výběr na svůj index
			VybraneKapitoly.Insert(index, HledanaKapitola);
		}

	}
}
