@page "/Kapitola"
@page "/Kapitola/{IdKapitola:int}/{status:bool}"
@using vyukovy_pavouk.Components;
@using vyukovy_pavouk.Data
@inject HttpClient Http
@inject NavigationManager MyNavigationManager
@inject MicrosoftTeams MicrosoftTeams
@layout UserLayout
@inject IUserToken UserToken
@inject IGroupToken GroupToken
@inject Solutaris.InfoWARE.ProtectedBrowserStorage.Services.IIWSessionStorageService sessionStorage
@using Microsoft.Graph;

@if(!IsLoaded) {
	<div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
		<FluentProgressRing />
	</div>
}
else {
	<div class="container">
		<div class="kapitola">
			<div class="d-flex pt-5 pb-3 align-items-center main-title">
				<h1 class="text-left font-weight-bold flex-grow-1">@kapitola.Název</h1>
				@if (UserToken.Profile.JobTitle == null)
			   {
				   <div class="admin-btn d-flex gap-3">
				<fluent-button class="btn-set" appearance="accent" @onclick=edit><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M13.94 5 19 10.06 9.062 20a2.25 2.25 0 0 1-.999.58l-5.116 1.395a.75.75 0 0 1-.92-.921l1.395-5.116a2.25 2.25 0 0 1 .58-.999L13.938 5Zm7.09-2.03a3.578 3.578 0 0 1 0 5.06l-.97.97L15 3.94l.97-.97a3.578 3.578 0 0 1 5.06 0Z" fill="#ffffff" /></svg></fluent-button>
				<fluent-button class="btn-set" appearance="accent" @onclick=OpenDialog><svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M21.5 6a1 1 0 0 1-.883.993L20.5 7h-.845l-1.231 12.52A2.75 2.75 0 0 1 15.687 22H8.313a2.75 2.75 0 0 1-2.737-2.48L4.345 7H3.5a1 1 0 0 1 0-2h5a3.5 3.5 0 1 1 7 0h5a1 1 0 0 1 1 1Zm-7.25 3.25a.75.75 0 0 0-.743.648L13.5 10v7l.007.102a.75.75 0 0 0 1.486 0L15 17v-7l-.007-.102a.75.75 0 0 0-.743-.648Zm-4.5 0a.75.75 0 0 0-.743.648L9 10v7l.007.102a.75.75 0 0 0 1.486 0L10.5 17v-7l-.007-.102a.75.75 0 0 0-.743-.648ZM12 3.5A1.5 1.5 0 0 0 10.5 5h3A1.5 1.5 0 0 0 12 3.5Z" fill="#ffffff" /></svg></fluent-button>
				
				<fluent-dialog Hidden="@ModelHidden">
					<div class="d-flex justify-content-center align-items-center h-100 w-100 flex-column">
					<h5 class="text-center">Opravdu si přejete smazat kapitolu @kapitola.Název ?</h5>
					<div>
						<fluent-button @onclick="CloseDialog">Zavřít</fluent-button>
						<fluent-button appearance="accent" @onclick="DeleteKapitola">Smazat</fluent-button>
					</div>
					</div>
				</fluent-dialog>
						<fluent-dialog Hidden="@ModelHiddenError">
							<div class="d-flex justify-content-center align-items-center h-100 w-100 flex-column">
								<h5 class="text-center">Kapitola @kapitola.Název nelze smazat!</h5>
								<p class="text-center">Kapitola je již použita jako prerekvizita pro jiné kapitoly! Nejdřív vymažte navázané kapitoly!</p>
								<div>
									<fluent-button appearance="accent" @onclick="CloseDialog2">Zavřít</fluent-button>
								</div>
							</div>
						</fluent-dialog>
			</div>
			   }			
			</div>
			<h5 class="pb-3">@kapitola.Perex</h5>
			<p class="pb-3">@kapitola.Kontent</p>
			@if (@kapitola.Videa.Count() > 0)
				   {
			<h3 class="pb-3">Videa:</h3>		
				<div class="row">				
					   @foreach (Videa video in @kapitola.Videa)
					{
						rozstridOdkazy++;
						if(video.Nazev == null) {
							switch(rozstridOdkazy) {
								case 1:
								<div class="col col-md-4"><a href="@video.Odkaz" target="_blank">odkaz</a></div>
								break;								
								case 2:
									<div class="col col-md-4 text-center"><a href="@video.Odkaz" target="_blank">odkaz</a></div>
								break;
								case 3:
									<div class="col col-md-4 text-end"><a href="@video.Odkaz" target="_blank">odkaz</a></div>
									rozstridOdkazy = 0;
									break;
							}
							
						}
						else {						
							switch(rozstridOdkazy) {
								case 1:
								<div class="col col-md-4"><a href="@video.Odkaz" target="_blank">@video.Nazev</a></div>
								break;								
								case 2:
									<div class="col col-md-4 text-center"><a href="@video.Odkaz" target="_blank">@video.Nazev</a></div>
								break;
								case 3:
									<div class="col col-md-4 text-end"><a href="@video.Odkaz" target="_blank">@video.Nazev</a></div>
									rozstridOdkazy = 0;
									break;
							}
						}
						
					}						   											
				</div>			   
			<hr class="pb-3" />
				   }
			<div class="d-flex justify-content-center align-items-center flex-column w-100">
			<fluent-button class="main-btn" Disabled="@status" appearance="accent">Vzít cvičení</fluent-button>
			<div class="popis text-center pb-3">
				<!--<p class="h5">0/1</p>-->
				<p>Při potvrzení tlačítka Vám bude odesláno cvičení na dané téma ve formě testu. Po následné korekci Vašeho testu bude zpřístupněna další kapitola.</p>
			</div>
			<fluent-anchor href="#" appearance="stealth" class="d-flex justify-content-center">zpátky<svg width="24" height="24" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="M7 5a1 1 0 0 1 1-1h5c2.242 0 4.01.778 5.218 2.023C19.414 7.256 20 8.887 20 10.5c0 1.613-.586 3.244-1.782 4.477C17.01 16.222 15.242 17 13 17H8.414l2.043 2.043a1 1 0 0 1-1.414 1.414l-3.75-3.75a1 1 0 0 1 0-1.414l3.75-3.75a1 1 0 0 1 1.414 1.414L8.414 15H13c1.758 0 2.99-.597 3.782-1.415.804-.83 1.218-1.948 1.218-3.085s-.414-2.256-1.218-3.085C15.99 6.597 14.758 6 13 6H8a1 1 0 0 1-1-1Z" fill="#212121" /></svg></fluent-anchor>
		</div>			
		</div>

	</div>
}
<style>
	fluent-dialog {
		position: sticky;
		z-index: 999;		
	}
</style>
@code {

	[Parameter]
	public int IdKapitola { get; set; }
	[Parameter]
	public bool status { get; set; }

	private Skupina skupina = new Skupina();
	private vyukovy_pavouk.Data.Kapitola kapitola { get; set; }
	private List<KapitolaPrerekvizita> prerekvizity = new List<KapitolaPrerekvizita>();
	private List<StudentSplneni> splneni = new List<StudentSplneni>();
	private bool IsLoaded = false;
	private bool ModelHidden { get; set; } = true;
	private bool ModelHiddenError { get; set; } = true;
	int rozstridOdkazy = 0;
	protected override async Task OnParametersSetAsync() {
		await CallApiKapitola();
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await UserToken.GetUserAsync(sessionStorage);
			await GroupToken.GetGroupAsync(MicrosoftTeams);
			if (UserToken.Profile == null)
			{
				MyNavigationManager.NavigateTo("/tab");
			}
			else
			{
				//pokud by se náhodou nevyvolala dřív OnParametersSetAsync vyvolám ho zde 
				if(kapitola == null) {
					await CallApiKapitola();
				}
				if(UserToken.Profile.JobTitle == null) {
					skupina = await Http.GetFromJsonAsync<Skupina>($"{MyNavigationManager.BaseUri}api/Skupina/" + (GroupToken.teamsContext.TeamId).ToString());
					prerekvizity = await Http.GetFromJsonAsync<List<KapitolaPrerekvizita>>($"{MyNavigationManager.BaseUri}api/Kapitoly/prerekvizity/" + (skupina.IDPredmetu));
				}
				IsLoaded = true;
			}
			StateHasChanged();
		}
	}
	private async Task CallApiKapitola() {
		kapitola = await Http.GetFromJsonAsync<vyukovy_pavouk.Data.Kapitola>($"{MyNavigationManager.BaseUri}api/kapitola/" + IdKapitola);
	}
	private void CloseDialog() => ModelHidden = true;
	private void CloseDialog2() => ModelHiddenError = true;
	
	private void OpenDialog()  {
		bool NelzeSmazat = false;
		foreach (KapitolaPrerekvizita Kprerekvizita in prerekvizity)
		{
			//TO DO 
			if(Kprerekvizita.prerekvizita.IdPrerekvizity == kapitola.Id) {
				NelzeSmazat = true;
				ModelHiddenError = false;
				break;					
			}
		}
		if(!NelzeSmazat) {
			ModelHidden = false;

		}
	}

	private void edit() {
		MyNavigationManager.NavigateTo($"edit/{kapitola.Id}");
	}
	private async Task DeleteKapitola() {
		//smazání samotné kapitoly 
		await Http.DeleteAsync($"{MyNavigationManager.BaseUri}api/kapitola/delete/{kapitola.Id}");
		//pokud jakýkoliv student má toto už splněno smaže se jeho splnění 
		//nejdříve zjistím všechny splnění ze skupiny 
		splneni = await Http.GetFromJsonAsync<List<StudentSplneni>>($"{MyNavigationManager.BaseUri}api/studenti/allSplneni/{skupina.Id}");
		//poté zkontroluju 
		foreach (StudentSplneni splneni in splneni)
		{
			//pokud je shoda ID kapitoly ve splneni a ID kapitoly této
			if(splneni.splneni.IdKapitoly == kapitola.Id) {
				await Http.DeleteAsync($"{MyNavigationManager.BaseUri}api/studenti/deleteSplneni/" + splneni.IdSplneni);
				break;
			}
		}
		MyNavigationManager.NavigateTo("/smazano");
	}
}
