@page "/tab"
@using vyukovy_pavouk.Components;
@using Azure.Core;
@using Microsoft.Graph;
@using Newtonsoft.Json;
@inject MicrosoftTeams MicrosoftTeams
@inject NavigationManager MyNavigationManager
@inject TeamsFx teamsfx
@inject IUserToken UserToken
@inject TeamsUserCredential teamsUserCredential

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<div>
	@if (!IsLoaded) {
		<div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
		<FluentProgressRing/>
	</div>
	}
	else {
		@if(@Profile.JobTitle == null) {
		<Vytvoreni_Teamu/>
		<p>@Profile.DisplayName</p>
			}
		else {
			<Vytvoreni_teamu_student />
		}
	}

</div>
@code {
	bool IsLoaded = false;
	[Inject]
	public NavigationManager NavigationManager { get; set; }

	public User Profile { get; set; }
	public string ErrorMessage { get; set; }
	public bool NeedConsent { get; set; }
	private readonly string _scope = "User.Read";

	protected override async Task OnAfterRenderAsync(bool firstRender){
		if (firstRender)
		{
			if (await HasPermission(_scope))
			{
				await ShowProfile();
				SetLocalUser();
				//await GetItem();
			}
			IsLoaded = true;
		}
		StateHasChanged();
	}
	//uložení uživatele --> ověřování pak bude probíhat přes toto uložení  
	public async void SetLocalUser() {
		string json = JsonConvert.SerializeObject(Profile);
		await sessionStorage.SetItemAsync<string>(UserToken.GetUserToken(), json);
	}
	//tohle bude sloužit až bude vytvořen Team v databázi 
	/*protected override void OnInitialized()
	{
		try
		{
			MyNavigationManager.NavigateTo("/");
		}
		catch(Exception) {

		}
	}*/
	/*public async Task GetItem() {
		string json = await sessionStorage.GetItemAsync<string>(UserToken.UserTokenAuth);
		Profile = JsonConvert.DeserializeObject<User>(json);
	}*/
	private async Task<bool> HasPermission(string scope)
	{
		try
		{
			await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { _scope }), new System.Threading.CancellationToken());
			return true;
		}
		catch (ExceptionWithCode e)
		{
			if (e.Code == ExceptionCode.UiRequiredError)
			{
				NeedConsent = true;
			}
			else
			{
				ErrorMessage = e.Message;
			}

		}
		return false;
	}

	private async Task ShowProfile()
	{
		var msGraphAuthProvider = new MsGraphAuthProvider(teamsUserCredential);
		var graph = new GraphServiceClient(msGraphAuthProvider);
		Profile = await graph.Me.Request().GetAsync();
	}
}



