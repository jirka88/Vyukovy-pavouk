@page "/"
@layout UserLayout
@using Azure.Core
@using Microsoft.Graph
@using vyukovy_pavouk.Components;
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential

<h1 class="text-center py-2 pb-4">Obsah</h1>
@if(IsLoaded) {
	
	<div class="d-flex flex-column justify-content-center align-items-center gap-3">
	<p>@Profile.DisplayName</p>
	<Kapitola_splneno ID="2" Nazev="Název Kapitoly" Perex="Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic" />
	<Kapitola_ucitel ID="3" Nazev="Název Kapitoly" Perex="Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic" />
	<Kapitola_odemceno ID="3" Nazev="Název Kapitoly" Perex="Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic" />
	<Kapitola_uzavreno ID="4" Nazev="Název Kapitoly" Perex="Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic" />
	</div>
}
else {
	 <div style="display: flex; justify-content: center; align-items: center; height: 50vh;">
		<FluentProgressRing/>
	</div>
}
	

@code {

	[Inject]
	public NavigationManager NavigationManager { get; set; }

	public User Profile { get; set; }
	public string ErrorMessage { get; set; }
	public bool NeedConsent { get; set; }
	public bool IsLoaded = false;

	private readonly string _scope = "User.Read";

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		if(firstRender) {
			if (await HasPermission(_scope))
			{
				await ShowProfile();
			}
			IsLoaded = true;
		}
		StateHasChanged();
	}

	private async Task<bool> HasPermission(string scope)
	{
		try
		{
			await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { _scope }), new System.Threading.CancellationToken());
			return true;
		}
		catch (ExceptionWithCode e)
		{
			if (e.Code == ExceptionCode.UiRequiredError)
			{
				NeedConsent = true;
			}
			else
			{
				ErrorMessage = e.Message;
			}

		}
		return false;
	}

	private async Task ShowProfile() {
		var msGraphAuthProvider = new MsGraphAuthProvider(teamsUserCredential);
		var graph = new GraphServiceClient(msGraphAuthProvider);
		Profile = await graph.Me.Request().GetAsync();
	}
}
