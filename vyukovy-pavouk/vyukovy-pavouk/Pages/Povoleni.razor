@page "/povoleni"
@page "/povoleni/{id:int}"
@using vyukovy_pavouk.Data
@layout UserLayout
@inject MicrosoftTeams MicrosoftTeams
@inject HttpClient Http
@inject NavigationManager MyNavigationManager
@inject IUserToken UserToken
@inject IGroupToken GroupToken
@inject Solutaris.InfoWARE.ProtectedBrowserStorage.Services.IIWSessionStorageService sessionStorage

@if(IsLoaded) {
	<h1 class="text-center py-2 pb-2 @(dark ? "text-white" : "")">Povolení</h1>
	<h4 class="text-center pb-2 @(dark ? "text-white" : "")">@student.Name @student.Surname</h4>
	<hr />

	<table class="table table-md my-4 @(dark ? "text-white" : "")">
		<thead>
			<tr>
				<th>Název odemčené kapitoly</th>
				<th>
					Zamítnou
				</th>
				<th>Povolit
					
				</th>
			</tr>
		</thead>
		<tbody class="@(dark ? "text-white" : "")">
				@foreach (vyukovy_pavouk.Data.Chapter chapter in chapters)
					{
						int status = ShowOnlyUnlocked(chapter);
						if(status == 3 || status == 2) {
							NotEmpty = true;
							break;
						}
					}
				@if(NotEmpty) {
					NotEmpty = false;
					@foreach (Chapter chapter in chapters)
					{					
						int status = ShowOnlyUnlocked(chapter);
						@if (status == 3 || status == 2)
						{
							<tr>
							<td><p class="d-flex align-items-center mt-1 mb-0">@chapter.Name</p></td>
							@if (status == 3)
							{
								<td><fluent-button appearance="accent" Disabled="@clicked" 
									@onclick="() => EnableNewChapter(chapter.Id, false)">
									<?xml version="1.0" encoding="iso-8859-1"?>
									<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24"  x="0px" y="0px"
									viewBox="0 0 460.775 460.775" style="enable-background:new 0 0 460 460;" xml:space="preserve">
									<path d="M285.08,230.397L456.218,59.27c6.076-6.077,6.076-15.911,0-21.986L423.511,4.565c-2.913-2.911-6.866-4.55-10.992-4.55
									c-4.127,0-8.08,1.639-10.993,4.55l-171.138,171.14L59.25,4.565c-2.913-2.911-6.866-4.55-10.993-4.55
									c-4.126,0-8.08,1.639-10.992,4.55L4.558,37.284c-6.077,6.075-6.077,15.909,0,21.986l171.138,171.128L4.575,401.505
									c-6.074,6.077-6.074,15.911,0,21.986l32.709,32.719c2.911,2.911,6.865,4.55,10.992,4.55c4.127,0,8.08-1.639,10.994-4.55
									l171.117-171.12l171.118,171.12c2.913,2.911,6.866,4.55,10.993,4.55c4.128,0,8.081-1.639,10.992-4.55l32.709-32.719
									c6.074-6.075,6.074-15.909,0-21.986L285.08,230.397z"/></svg></fluent-button></td>
								<td><fluent-button appearance="accent" Disabled="@clicked" 
									@onclick="() => EnableNewChapter(chapter.Id, true)">
									<svg width="28" height="28" stroke="white" stroke-width="2" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
										<path d="m8.5 16.586-3.793-3.793a1 1 0 0 0-1.414 1.414l4.5 4.5a1 1 0 0 0 1.414 0l11-11a1 1 0 0 0-1.414-1.414L8.5 16.586Z" fill="#ffffff" /></svg></fluent-button></td>
							}
							else
							{
								<td><fluent-button appearance="accent" disabled="true">
									<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24"  x="0px" y="0px"
									viewBox="0 0 460.775 460.775" style="enable-background:new 0 0 460 460;" xml:space="preserve">
									<path d="M285.08,230.397L456.218,59.27c6.076-6.077,6.076-15.911,0-21.986L423.511,4.565c-2.913-2.911-6.866-4.55-10.992-4.55
									c-4.127,0-8.08,1.639-10.993,4.55l-171.138,171.14L59.25,4.565c-2.913-2.911-6.866-4.55-10.993-4.55
									c-4.126,0-8.08,1.639-10.992,4.55L4.558,37.284c-6.077,6.075-6.077,15.909,0,21.986l171.138,171.128L4.575,401.505
									c-6.074,6.077-6.074,15.911,0,21.986l32.709,32.719c2.911,2.911,6.865,4.55,10.992,4.55c4.127,0,8.08-1.639,10.994-4.55
									l171.117-171.12l171.118,171.12c2.913,2.911,6.866,4.55,10.993,4.55c4.128,0,8.081-1.639,10.992-4.55l32.709-32.719
									c6.074-6.075,6.074-15.909,0-21.986L285.08,230.397z"/></svg></fluent-button></td>
								<td><fluent-button appearance="accent" Disabled="@clicked" 
									@onclick="() => RepairChapter(chapter.Id)">
									<svg width="28" height="28" stroke="white" stroke-width="2" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
										<path d="m8.5 16.586-3.793-3.793a1 1 0 0 0-1.414 1.414l4.5 4.5a1 1 0 0 0 1.414 0l11-11a1 1 0 0 0-1.414-1.414L8.5 16.586Z" fill="#ffffff" /></svg></fluent-button></td>
							}
							</tr>
						}
					}
				}
				else {
					<tr>
					<td colspan="3" class="text-center @(dark ? "text-white" : "")">Není co povolit!</td>
					</tr>
				}
		</tbody>
	</table>
}

else {
	<div style="display: flex; justify-content: center; align-items: center; height: calc(90vh - 88px);">
		<FluentProgressRing/>
	</div>
}
<style>

</style>
<link rel="stylesheet" href="css/Main-Kapitoly.css" />
@code {
	[Parameter]
	public int id { get; set; }

	bool NotEmpty = false;
	bool clicked = false;
	bool IsLoaded = false;
	bool dark = false;
	Group group = new Group();
	Student student = new Student();
	List<vyukovy_pavouk.Data.Chapter> chapters;
	List<ChapterPrerequisite> Prerequisites = new List<ChapterPrerequisite>();
	@inject IToastService notice;
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender) {

			await UserToken.GetUserAsync(sessionStorage);
			await GroupToken.GetGroupAsync(MicrosoftTeams);
			if(UserToken.Profile == null || UserToken.Profile.JobTitle.ToLower() == "žák školy")  {
				MyNavigationManager.NavigateTo("/tab");
			}
			else {
				if (GroupToken.teamsContext.Theme == "dark" || GroupToken.teamsContext.Theme == "contrast")
				{
					dark = true;
				}
				group = await Http.GetFromJsonAsync<Group>
				($"{MyNavigationManager.BaseUri}api/Skupina/" + (GroupToken.teamsContext.TeamId).ToString());
				chapters = await Http.GetFromJsonAsync<List<Chapter>>
				($"{MyNavigationManager.BaseUri}api/Kapitoly/" + (Convert.ToInt32(group.Subject.Id)));
				student = await Http.GetFromJsonAsync<Student>
				($"{MyNavigationManager.BaseUri}api/studenti/progres/" + Convert.ToInt32(group.Id) + "/" + id);
				IsLoaded = true;
			}
		}
		StateHasChanged();
	}
	private int ShowOnlyUnlocked(Chapter chapter) {
		if(Prerequisites.Count() > 0) {
			Prerequisites.Clear();
		}
		ChapterPrerequisite save = new ChapterPrerequisite();
		foreach (var completion in student.StudentCompletion.Select(x => x.Completion))
		{
			//pokud je splněno 
			if(completion.ChapterID == chapter.Id && student.StudentCompletion.Find(x => x.Completion.Id == completion.Id).Success == true) {
				return 1;
			}
			// neúspěšně splněno 
			else if (completion.ChapterID == chapter.Id && student.StudentCompletion.Find(x => x.CompletionID == completion.Id).Success == false)
			{
				return 2;
			}
			//ukládání pokud je odemčena
			save = chapter.ChapterPrerequisites.Find(x => x.Prerequisite.PrerequisiteID == completion.ChapterID);
			if (save != null) {
				Prerequisites.Add(save);
			}
		}
		//kontrola zdali je odemčené splněné prerekvizity pocet == celkovy pocet prerekvizit v kapitole 
		if(Prerequisites.Count() == chapter.ChapterPrerequisites.Count()) {
			//kontroluje prerekvizitu kapitoly a studenta (neúspěšného splnění) 
			// ==> pokud nastane nezobrazí další kapitoly pro odemčení a může se odemknout (na úspěšný stav) pouze ta neúspěšně splněná 
			foreach (ChapterPrerequisite chapterPrerequisite in chapter.ChapterPrerequisites)
			{
				int IDChapterPrerequisite = chapterPrerequisite.Prerequisite.PrerequisiteID;
				StudentCompletion studentTestCompletion = new StudentCompletion();
				studentTestCompletion = student.StudentCompletion
				.Where(x => x.Success == false && x.Completion.ChapterID == IDChapterPrerequisite)
				.SingleOrDefault();
				if(studentTestCompletion != null) {
					return 1;
				}
			}
			return 3;
		}
		else {
			return 1;
		}
	}
	//vytvoření nového splnění pro studenta
	private async Task EnableNewChapter(int IdChapter, bool success) {
		clicked = true;
		StudentCompletion studentCompletion = new StudentCompletion()
		{Completion = new Completion()};
		studentCompletion.StudentID = student.Id;
		studentCompletion.Success = success;
		studentCompletion.Completion.ChapterID = IdChapter;
		studentCompletion.Completion.GroupID = group.Id;
		await Http.PostAsJsonAsync
		($"{MyNavigationManager.BaseUri}api/studenti/splneni",studentCompletion);
		student = await Http.GetFromJsonAsync<Student>
		($"{MyNavigationManager.BaseUri}api/studenti/progres/{group.Id}/{id}");
		if(success) {
			notice.ShowSuccess("Povoleno.", "Úspěch!");
		}
		else {
			notice.ShowSuccess("Nepovoleno.", "Úspěch!");
		}	
		clicked = false;
		await InvokeAsync(StateHasChanged);
	}
	//povolení neúspěšné kapitoly  
	private async Task RepairChapter(int IdChapter) {
		clicked = true;
		StudentCompletion studentCompletion = student.StudentCompletion
		.Where(x => x.Completion.ChapterID == IdChapter && x.Completion.GroupID == group.Id).SingleOrDefault();
		studentCompletion.Success = true;	
		await Http.PutAsJsonAsync<StudentCompletion>($"{MyNavigationManager.BaseUri}api/studenti", studentCompletion);
		student = await Http.GetFromJsonAsync<Student>($"{MyNavigationManager.BaseUri}api/studenti/progres/{group.Id}/{id}");
		notice.ShowSuccess("Povoleno.", "Úspěch!");
		clicked = false;
		await InvokeAsync(StateHasChanged);
	}
}
